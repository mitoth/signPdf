[{"C:\\beluga\\v5\\Beluga.Viewer\\ClientApp\\src\\index.tsx":"1","C:\\beluga\\v5\\Beluga.Viewer\\ClientApp\\src\\App.tsx":"2","C:\\beluga\\v5\\Beluga.Viewer\\clientapp\\src\\index.tsx":"3","C:\\beluga\\v5\\Beluga.Viewer\\clientapp\\src\\App.tsx":"4","C:\\beluga\\v5\\Beluga.Viewer\\clientapp\\src\\components\\FileUpload.tsx":"5","C:\\beluga\\v5\\Beluga.Viewer\\clientapp\\src\\components\\Editor.tsx":"6","C:\\beluga\\v5\\Beluga.Viewer\\clientapp\\src\\services\\FileUploadService.ts":"7","C:\\beluga\\v5\\Beluga.Viewer\\clientapp\\src\\components\\PageDrawStage.tsx":"8","C:\\beluga\\v5\\Beluga.Viewer\\clientapp\\src\\http-common.ts":"9","C:\\beluga\\v5\\Beluga.Viewer\\clientapp\\src\\components\\KonvaDrawLayer.tsx":"10","C:\\beluga\\v5\\Beluga.Viewer\\clientapp\\src\\components\\PageImage.tsx":"11","C:\\beluga\\v5\\Beluga.Viewer\\clientapp\\src\\components\\RectangleShape.tsx":"12","C:\\beluga\\v5\\Beluga.Viewer\\ClientApp\\src\\components\\FileUpload.tsx":"13","C:\\beluga\\v5\\Beluga.Viewer\\ClientApp\\src\\components\\Editor.tsx":"14","C:\\beluga\\v5\\Beluga.Viewer\\ClientApp\\src\\services\\FileUploadService.ts":"15","C:\\beluga\\v5\\Beluga.Viewer\\ClientApp\\src\\components\\PageDrawStage.tsx":"16","C:\\beluga\\v5\\Beluga.Viewer\\ClientApp\\src\\http-common.ts":"17","C:\\beluga\\v5\\Beluga.Viewer\\ClientApp\\src\\components\\PageImage.tsx":"18","C:\\beluga\\v5\\Beluga.Viewer\\ClientApp\\src\\components\\KonvaDrawLayer.tsx":"19","C:\\beluga\\v5\\Beluga.Viewer\\ClientApp\\src\\components\\RectangleShape.tsx":"20","C:\\beluga\\v5\\Beluga.Viewer\\ClientApp\\src\\components\\FileDownload.tsx":"21","C:\\beluga\\RedactMyPdf\\RedactMyPdf.Viewer\\ClientApp\\src\\index.tsx":"22","C:\\beluga\\RedactMyPdf\\RedactMyPdf.Viewer\\ClientApp\\src\\App.tsx":"23","C:\\beluga\\RedactMyPdf\\RedactMyPdf.Viewer\\ClientApp\\src\\components\\Editor.tsx":"24","C:\\beluga\\RedactMyPdf\\RedactMyPdf.Viewer\\ClientApp\\src\\components\\FileUpload.tsx":"25","C:\\beluga\\RedactMyPdf\\RedactMyPdf.Viewer\\ClientApp\\src\\services\\FileUploadService.ts":"26","C:\\beluga\\RedactMyPdf\\RedactMyPdf.Viewer\\ClientApp\\src\\components\\PageDrawStage.tsx":"27","C:\\beluga\\RedactMyPdf\\RedactMyPdf.Viewer\\ClientApp\\src\\components\\FileDownload.tsx":"28","C:\\beluga\\RedactMyPdf\\RedactMyPdf.Viewer\\ClientApp\\src\\components\\KonvaDrawLayer.tsx":"29","C:\\beluga\\RedactMyPdf\\RedactMyPdf.Viewer\\ClientApp\\src\\components\\PageImage.tsx":"30","C:\\beluga\\RedactMyPdf\\RedactMyPdf.Viewer\\ClientApp\\src\\components\\RectangleShape.tsx":"31"},{"size":467,"mtime":1608801692144,"results":"32","hashOfConfig":"33"},{"size":763,"mtime":1609336510971,"results":"34","hashOfConfig":"33"},{"size":467,"mtime":1608801692144,"results":"35","hashOfConfig":"36"},{"size":763,"mtime":1609336510971,"results":"37","hashOfConfig":"36"},{"size":3565,"mtime":1609334476548,"results":"38","hashOfConfig":"36"},{"size":4137,"mtime":1609336398465,"results":"39","hashOfConfig":"36"},{"size":689,"mtime":1608839471929,"results":"40","hashOfConfig":"36"},{"size":1131,"mtime":1609335014425,"results":"41","hashOfConfig":"36"},{"size":101,"mtime":1609334476681,"results":"42","hashOfConfig":"36"},{"size":1674,"mtime":1608838412180,"results":"43","hashOfConfig":"36"},{"size":428,"mtime":1608809300991,"results":"44","hashOfConfig":"36"},{"size":3083,"mtime":1608829483101,"results":"45","hashOfConfig":"36"},{"size":4404,"mtime":1609601264455,"results":"46","hashOfConfig":"33"},{"size":4964,"mtime":1609603849970,"results":"47","hashOfConfig":"33"},{"size":800,"mtime":1609602929868,"results":"48","hashOfConfig":"33"},{"size":1091,"mtime":1609348750418,"results":"49","hashOfConfig":"33"},{"size":101,"mtime":1609334476681,"results":"50","hashOfConfig":"33"},{"size":428,"mtime":1608809300991,"results":"51","hashOfConfig":"33"},{"size":1674,"mtime":1608838412180,"results":"52","hashOfConfig":"33"},{"size":3083,"mtime":1608829483101,"results":"53","hashOfConfig":"33"},{"size":542,"mtime":1609343552157,"results":"54","hashOfConfig":"33"},{"size":467,"mtime":1614631611980,"results":"55","hashOfConfig":"56"},{"size":629,"mtime":1614631467584,"results":"57","hashOfConfig":"56"},{"size":10292,"mtime":1614631394917,"results":"58","hashOfConfig":"56"},{"size":4623,"mtime":1614631407670,"results":"59","hashOfConfig":"56"},{"size":818,"mtime":1614631439298,"results":"60","hashOfConfig":"56"},{"size":1498,"mtime":1614634881285,"results":"61","hashOfConfig":"56"},{"size":486,"mtime":1614634847970,"results":"62","hashOfConfig":"56"},{"size":2148,"mtime":1614634873589,"results":"63","hashOfConfig":"56"},{"size":669,"mtime":1614631413187,"results":"64","hashOfConfig":"56"},{"size":4396,"mtime":1614631163147,"results":"65","hashOfConfig":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"phc6x6",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},"1cnink4",{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"73"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"68"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},"1haxtrv",{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"115"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"115"},"C:\\beluga\\v5\\Beluga.Viewer\\ClientApp\\src\\index.tsx",[],[],"C:\\beluga\\v5\\Beluga.Viewer\\ClientApp\\src\\App.tsx",[],"C:\\beluga\\v5\\Beluga.Viewer\\clientapp\\src\\index.tsx",[],[],"C:\\beluga\\v5\\Beluga.Viewer\\clientapp\\src\\App.tsx",[],"C:\\beluga\\v5\\Beluga.Viewer\\clientapp\\src\\components\\FileUpload.tsx",[],"C:\\beluga\\v5\\Beluga.Viewer\\clientapp\\src\\components\\Editor.tsx",["136"],"C:\\beluga\\v5\\Beluga.Viewer\\clientapp\\src\\services\\FileUploadService.ts",["137"],"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { AxiosResponse } from 'axios';\nimport http from '../http-common';\nconst upload = async (\n    file: string | Blob,\n    onUploadProgress: (progressEvent: any) => void,\n): Promise<AxiosResponse<any>> => {\n    const formData = new FormData();\n    formData.append('file', file);\n    return http.post('/api/v1/document', formData, {\n        headers: {\n            'Content-Type': 'multipart/form-data',\n        },\n        onUploadProgress,\n    });\n};\n\nconst save = (documentId: string, shapes: any): any => {\n    return http.post(`/api/v1/document/${documentId}/burnAndWait`, shapes);\n};\n\nexport default {\n    upload,\n    save,\n};\n","C:\\beluga\\v5\\Beluga.Viewer\\clientapp\\src\\components\\PageDrawStage.tsx",[],"C:\\beluga\\v5\\Beluga.Viewer\\clientapp\\src\\http-common.ts",[],"C:\\beluga\\v5\\Beluga.Viewer\\clientapp\\src\\components\\KonvaDrawLayer.tsx",[],"C:\\beluga\\v5\\Beluga.Viewer\\clientapp\\src\\components\\PageImage.tsx",[],"C:\\beluga\\v5\\Beluga.Viewer\\clientapp\\src\\components\\RectangleShape.tsx",[],"C:\\beluga\\v5\\Beluga.Viewer\\ClientApp\\src\\components\\FileUpload.tsx",[],"C:\\beluga\\v5\\Beluga.Viewer\\ClientApp\\src\\components\\Editor.tsx",[],"C:\\beluga\\v5\\Beluga.Viewer\\ClientApp\\src\\services\\FileUploadService.ts",["138"],"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { AxiosResponse } from 'axios';\nimport http from '../http-common';\nconst upload = async (\n    file: string | Blob,\n    signalRClientId: string,\n    onUploadProgress: (progressEvent: any) => void,\n): Promise<AxiosResponse<any>> => {\n    const formData = new FormData();\n    formData.append('file', file);\n    return http.post(`/api/v1/document?connectionId=${signalRClientId}`, formData, {\n        headers: {\n            'Content-Type': 'multipart/form-data',\n        },\n        onUploadProgress,\n    });\n};\n\nconst save = (documentId: string, shapes: any, signalRClientId: string): any => {\n    return http.post(`/api/v1/document/${documentId}/burn?connectionId=${signalRClientId}`, shapes);\n};\n\nexport default {\n    upload,\n    save,\n};\n","C:\\beluga\\v5\\Beluga.Viewer\\ClientApp\\src\\components\\PageDrawStage.tsx",[],"C:\\beluga\\v5\\Beluga.Viewer\\ClientApp\\src\\http-common.ts",[],"C:\\beluga\\v5\\Beluga.Viewer\\ClientApp\\src\\components\\PageImage.tsx",[],"C:\\beluga\\v5\\Beluga.Viewer\\ClientApp\\src\\components\\KonvaDrawLayer.tsx",[],"C:\\beluga\\v5\\Beluga.Viewer\\ClientApp\\src\\components\\RectangleShape.tsx",[],[],"C:\\beluga\\v5\\Beluga.Viewer\\ClientApp\\src\\components\\FileDownload.tsx",[],"C:\\beluga\\RedactMyPdf\\RedactMyPdf.Viewer\\ClientApp\\src\\index.tsx",[],[],"C:\\beluga\\RedactMyPdf\\RedactMyPdf.Viewer\\ClientApp\\src\\App.tsx",[],"C:\\beluga\\RedactMyPdf\\RedactMyPdf.Viewer\\ClientApp\\src\\components\\Editor.tsx",[],"C:\\beluga\\RedactMyPdf\\RedactMyPdf.Viewer\\ClientApp\\src\\components\\FileUpload.tsx",[],"C:\\beluga\\RedactMyPdf\\RedactMyPdf.Viewer\\ClientApp\\src\\services\\FileUploadService.ts",["139"],"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { AxiosResponse } from 'axios';\nimport axios from 'axios';\nconst upload = async (\n    file: string | Blob,\n    signalRClientId: string,\n    onUploadProgress: (progressEvent: any) => void,\n): Promise<AxiosResponse<any>> => {\n    const formData = new FormData();\n    formData.append('file', file);\n    return axios.post(`/api/v1/document?connectionId=${signalRClientId}`, formData, {\n        headers: {\n            'Content-Type': 'multipart/form-data',\n        },\n        timeout: 20000,\n        onUploadProgress,\n    });\n};\n\nconst save = (documentId: string, shapes: any, signalRClientId: string): any => {\n    return axios.post(`/api/v1/document/${documentId}/burn?connectionId=${signalRClientId}`, shapes);\n};\n\nexport default {\n    upload,\n    save,\n};\n","C:\\beluga\\RedactMyPdf\\RedactMyPdf.Viewer\\ClientApp\\src\\components\\PageDrawStage.tsx",[],"C:\\beluga\\RedactMyPdf\\RedactMyPdf.Viewer\\ClientApp\\src\\components\\FileDownload.tsx",["140"],"C:\\beluga\\RedactMyPdf\\RedactMyPdf.Viewer\\ClientApp\\src\\components\\KonvaDrawLayer.tsx",[],"C:\\beluga\\RedactMyPdf\\RedactMyPdf.Viewer\\ClientApp\\src\\components\\PageImage.tsx",[],"C:\\beluga\\RedactMyPdf\\RedactMyPdf.Viewer\\ClientApp\\src\\components\\RectangleShape.tsx",["141"],"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { Rect as RectKonvaShape } from 'konva/types/shapes/Rect';\nimport { Circle as CircleKonvaShape } from 'konva/types/shapes/Circle';\nimport { Transformer as TransformerKonvaShape } from 'konva/types/shapes/Transformer';\nimport React, { ReactElement } from 'react';\nimport { Rect, Circle, Text, Transformer } from 'react-konva';\n\ninterface IProps {\n    shapeProps: any;\n    isSelected: boolean;\n    onSelect: any;\n    onChange: any;\n    onDelete: any;\n}\n\nconst RectangleShape = ({ shapeProps, isSelected, onSelect, onChange, onDelete }: IProps): ReactElement => {\n    const rectRef = React.useRef<RectKonvaShape>();\n    const circleRef = React.useRef<CircleKonvaShape>();\n    const trRef: React.MutableRefObject<TransformerKonvaShape | null> = React.useRef<TransformerKonvaShape>() as React.MutableRefObject<TransformerKonvaShape | null>;\n\n    React.useEffect(() => {\n        if (isSelected) {\n            // we need to attach transformer manually\n            const current: any = trRef.current;\n            if (current) {\n                current!.nodes([rectRef.current]);\n                current!.getLayer()!.batchDraw();\n            }\n            circleRef.current?.show();\n        } else {\n            circleRef.current?.hide();\n        }\n    }, [isSelected]);\n\n    return (\n        <React.Fragment>\n            <Circle\n                ref={circleRef as React.MutableRefObject<CircleKonvaShape>}\n                onClick={() => {\n                    onDelete();\n                }}\n                radius={10}\n                fill=\"red\"\n                x={rectRef.current?.attrs.x ? rectRef.current?.attrs.x : shapeProps.x}\n                y={rectRef.current?.attrs.y ? rectRef.current?.attrs.y - 20 : shapeProps.y - 20}\n            ></Circle>\n            <Rect\n                onClick={onSelect}\n                onTap={onSelect}\n                ref={rectRef}\n                {...shapeProps}\n                draggable\n                onDragStart={() => {\n                    if (isSelected) {\n                        circleRef.current?.hide();\n                    }\n                }}\n                onDragEnd={(e) => {\n                    if (isSelected) {\n                        circleRef.current?.show();\n                    }\n                    onChange({\n                        ...shapeProps,\n                        x: e.target.x(),\n                        y: e.target.y(),\n                    });\n                }}\n                onTransformStart={() => {\n                    if (isSelected) {\n                        circleRef.current?.hide();\n                    }\n                }}\n                onTransformEnd={() => {\n                    if (isSelected) {\n                        circleRef.current?.show();\n                    }\n                    // transformer is changing scale of the node\n                    // and NOT its width or height\n                    // but in the store we have only width and height\n                    // to match the data better we will reset scale on transform end\n                    const node: RectKonvaShape | undefined = rectRef.current;\n                    if (!node) return;\n                    const scaleX = node.scaleX();\n                    const scaleY = node.scaleY();\n\n                    // we will reset it back\n                    node.scaleX(1);\n                    node.scaleY(1);\n                    onChange({\n                        ...shapeProps,\n                        x: node.x(),\n                        y: node.y(),\n                        // set minimal value\n                        width: Math.max(5, node.width() * scaleX),\n                        height: Math.max(node.height() * scaleY),\n                    });\n                }}\n            />\n            {isSelected && (\n                <Transformer\n                    ref={trRef}\n                    boundBoxFunc={(oldBox, newBox) => {\n                        console.log('traassd');\n                        // limit resize\n                        if (newBox.width < 5 || newBox.height < 5) {\n                            return oldBox;\n                        }\n                        return newBox;\n                    }}\n                />\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default RectangleShape;\n",{"ruleId":"142","severity":1,"message":"143","line":94,"column":11,"nodeType":"144","messageId":"145","endLine":94,"endColumn":33},{"ruleId":"146","severity":1,"message":"147","line":18,"column":35,"nodeType":"144","messageId":"148","endLine":18,"endColumn":46},{"ruleId":"146","severity":1,"message":"147","line":19,"column":35,"nodeType":"144","messageId":"148","endLine":19,"endColumn":46},{"ruleId":"146","severity":1,"message":"147","line":20,"column":35,"nodeType":"144","messageId":"148","endLine":20,"endColumn":46},{"ruleId":"149","severity":1,"message":"150","line":9,"column":25,"nodeType":"151","messageId":"152","endLine":9,"endColumn":28,"suggestions":"153"},{"ruleId":"142","severity":1,"message":"154","line":7,"column":24,"nodeType":"144","messageId":"145","endLine":7,"endColumn":28},"@typescript-eslint/no-unused-vars","'handleDownloadComplete' is assigned a value but never used.","Identifier","unusedVar","@typescript-eslint/explicit-module-boundary-types","Argument 'shapes' should be typed with a non-any type.","anyTypedArg","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["155","156"],"'Text' is defined but never used.",{"messageId":"157","fix":"158","desc":"159"},{"messageId":"160","fix":"161","desc":"162"},"suggestUnknown",{"range":"163","text":"164"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"163","text":"165"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[229,232],"unknown","never"]